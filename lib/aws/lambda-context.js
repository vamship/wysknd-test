'use strict';

const DEFAULT_ARN_PREFIX = 'arn:aws:lambda:__aws_region__:__aws_account__:function';
const DEFAULT_FUNCTION_NAME = '__function_name__';
const DEFAULT_FUNCTION_VERSION = '$LATEST';

/**
 * Builder class for an AWS lambda context object.
 */
class LambdaContext {
    /**
     * @param {Object} [contextInfo = {
     *            functionName: "__lambda_function_name__",
     *            alias: null
     *        } ] Additional context info that will be used to generate the
     *        lambda context. If omitted, a default object will be generated.
     *        If the functionName property begins with "arn:", it will be
     *        used as specified. Otherwise, the name will be appended to an
     *        autogenerated arn prefix.
     */
    constructor(contextInfo) {
        if(!contextInfo || typeof contextInfo !== 'object') {
            contextInfo = {};
        }
        contextInfo.functionName = contextInfo.functionName || DEFAULT_FUNCTION_NAME;
        contextInfo.invokedFunctionArn = contextInfo.invokedFunctionArn ||
                                `${DEFAULT_ARN_PREFIX}:${contextInfo.functionName}`;
        contextInfo.functionVersion = contextInfo.functionVersion || DEFAULT_FUNCTION_VERSION;
        this._env = 'na';

        if(typeof contextInfo.alias === 'string' && contextInfo.alias.length > 0) {
            contextInfo.invokedFunctionArn = `${contextInfo.invokedFunctionArn}:${contextInfo.alias}`;
            if(contextInfo.alias !== '$LATEST') {
                this._env = contextInfo.alias;
            }
            delete contextInfo.alias;
        }

        this._context = {};
        for(let prop in contextInfo) {
            this._context[prop] = contextInfo[prop];
        }
    }

    /**
     * Gets a reference to the mock aws context object for AWS Lambda functions.
     *
     * @return {Object} Reference to the context object.
     */
    get context() {
        return this._context;
    }

    /**
     * Gets a reference to the current lambda env, derived from the invocation arn.
     *
     * @return {String} The current lambda environment
     */
    get env() {
        return this._env;
    }
}

module.exports = LambdaContext;
